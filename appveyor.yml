# Operating system (build VM template)
os: Windows Server 2016

# If the build configuration does not specify build worker image
# then Visual Studio 2015 image is used.
image: Visual Studio 2017

# Restrict to Git branches below
branches:
  only:
    - master

# Build Configuration, i.e. Debug, Release, etc.
configuration: Debug

environment:
  VERSION_SIMPLE: '{version}'
  VERSION_INFORMATIONAL: '{version}'
  VERSION_UNSTABLE_SUFFIX: 'preview'
  COVERALLS_REPO_TOKEN:
    secure: odGiKZUnpY4yFHVXwHGp3Tk1dXKQRPS1JVSftdfIK/rMc17ttK6q2T2jwfZme5pB
  APPVEYOR_TOKEN:
    secure: LtoVAPATN9iTCl1zkCvEktqP92QSEEngyS3vqG3GphE=
  GIT_SSH_KEY:
    secure: kRPByNqMqQdDnoi5AiOM/jpJ5p4NL7p1TXklkUVGatP0e7+p1sV2QF40OYUOML/RAutb2nCSyT0TEbq6agZ5EXCVJ61rPaxTA2SfZzEhRCVOlx58MMPmylghBHFzeTYXzaImi8/9P44QmXRKmgYPn7KOmEcuB1idEXXT0ASTUVrTAzbBrsa36yMus2MqWiCe3ouXw0J8vf6PHTXDcFUEYHelSUerHaUqHEjceJSDDNk9cEbA9sbVAhAq4mALzNzaF7tew8PrBYbTHRIAyHlX8jBVbe/E/VmgijkdqTelJttFWbZ/w1HN7O5pHOCD85hwnh+G/W8pcAOW+xHgeMEmS0LXOYIno102KXWx6v16GPBU2HX8jJqNBOk1I2WZG//aIxEctN0xsnUjDPMq7icgxjVl6x+ix5MR4qNTu/Oa3qRLbIL/5rTDeECAY2yzfsylBCszEuC7+wjCv7WHCwaMxmQs0lZeuySm4NPIvmCoeAgqtdEt2b7jVB7aXpKC08oXLlWkDPbwkfJJZoIXE34bIgmQhLMTci7Yog9oiT4MjycdNoOsKeNQ1FIf50wlyPrV02UEiwic8Y9xghgY+W5zyvO1Az0EtnTSRKnOllF7Axs70zDaI9/AjOL+N+zzQS2pEf4HQKmVElIov8tbFEz56p5bxKEYLxq/VKUbTfq3jtLkn63PMsGLg9ds6S54xBuZ1MCmXBA8V6mkVOLmESvzjZz8G7Lc/SFF66lSjOIxTxQIsArKKbvE86WA76yZHdC+n5zSgy2cPiYKipqS2I+ZGBwGid0awMRQ503PyWt2FABEhXwzfoFeUMxGJeBZwdSFcRDV20uEv5x1eO69LiIHajG8lodzfM8GH4oSbVTSbPl8yB+qagnttXvJ7PKK15AbIqNTqDMi2M1n6vzUhc+u9yaKM6PAQH+gD4dJH8zEOY5zCzZ5euawZt4cgr96wUd6jFlheQihVkQohYS0QhEddOcyw0/hsH7IxFR2MI8/R2h7xbXuGfzXbVbFzTMIis2W5wQ8DBlC+ycTwtv7YhZHUzg2hFCFb8lMVe2WYaJcS8R6954P/6Un4ui5PJPGa44Upk91OSolfoZFZNI78Se8eQ==

# Scripts that run after cloning repository
install:
  - ps: $fileContent = "-----BEGIN RSA PRIVATE KEY-----`n"
  - ps: $fileContent += $env:GIT_SSH_KEY.Replace(' ', "`n")
  - ps: $fileContent += "`n-----END RSA PRIVATE KEY-----`n"
  - ps: Set-Content $env:userprofile\.ssh\id_rsa $fileContent
  - git submodule update --init --recursive
  - dotnet --info
  - dotnet restore

init:
- ps: |
    $env:VERSION_SIMPLE = $env:APPVEYOR_BUILD_VERSION.TrimStart("v")
    $env:VERSION_INFORMATIONAL = "$env:VERSION_SIMPLE"
    $env:GITHUB_REPO_API = "https://api.github.com/repos/$env:APPVEYOR_REPO_NAME/tags"

    if ($env:APPVEYOR_REPO_TAG -eq "true" -and $env:APPVEYOR_REPO_TAG_NAME) {
        ### CHECK IF A IT'S A TAGGED BUILD
        $env:APPVEYOR_REPO_TAG_NAME = $env:APPVEYOR_REPO_TAG_NAME.TrimStart("v")
        Write-Host "Building a tagged Git commit: $git_current_tag";
        if ($env:APPVEYOR_REPO_TAG_NAME -match '^([0-9]+\.[0-9]+\.[0-9]+(\.[0-9]+)?)$') {
            $tag_ver = [version]$env:APPVEYOR_REPO_TAG_NAME
            $env:VERSION_INFORMATIONAL = "{0}.{1}.{2}" -f $tag_ver.Major, $tag_ver.Minor, $tag_ver.Build
            $env:VERSION_SIMPLE = "$env:VERSION_INFORMATIONAL.$env:APPVEYOR_BUILD_NUMBER"
        }
    } elseif ($env:VERSION_INFORMATIONAL -match '^([0-9]+\.[0-9]+\.[0-9]+(\.[0-9]+)?)$') {
        $current_ver = [version]$env:VERSION_INFORMATIONAL
        $env:VERSION_INFORMATIONAL = "{0}.{1}.{2}" -f $current_ver.Major, $current_ver.Minor, $current_ver.Build
        $env:VERSION_INFORMATIONAL = "{0}-{1}{2}" -f $env:VERSION_INFORMATIONAL, $env:VERSION_UNSTABLE_SUFFIX, $env:APPVEYOR_BUILD_NUMBER
    }

    ### MAKE CALCULATED INFORMATIONAL VERSION THE ACTUAL BUILD VERSION
    Update-AppveyorBuild -Version $env:VERSION_INFORMATIONAL
    Write-Host "Using build version: $env:VERSION_SIMPLE"
    Write-Host "Using (informational) build version: $env:VERSION_INFORMATIONAL"

dotnet_csproj:
  patch: true
  file: '**\*.csproj'
  assembly_version: $(VERSION_SIMPLE)
  file_version: $(VERSION_SIMPLE)
  version: $(VERSION_INFORMATIONAL)
  package_version: $(VERSION_INFORMATIONAL)
  informational_version: $(VERSION_INFORMATIONAL)

# Run scripts below before
before_build:
  - cmd: where dotnet
  - cmd: dotnet clean

# Run scripts below before
build_script:
  - cmd: dotnet build

# NuGet files qualified as artifacts
artifacts:
  - path: 'bin\**\*.nupkg' # find the NuGet files
    name: NuGet_Files

# Deploy to GitHub releases
deploy:
  -
    provider: GitHub
    auth_token:
      secure: 2+d0KgCbWQpUR8TZfzvUEzbi4NQP6F/Tt0PUwLn6jXZCyO8FnrFVFJPsFa0QBQFl
    artifact: NuGet_Files
    draft: false
    force_update: true
    prerelease: false
    release: "$(APPVEYOR_PROJECT_NAME) v$(APPVEYOR_REPO_TAG_NAME)"
    tag: $(APPVEYOR_REPO_TAG_NAME)
    on:
      appveyor_repo_tag: true

  -
    provider: NuGet
    api_key:
      secure: TrtChQUTQ9rD8pffK1A9bjMYyN/8eQUjV+7IKVjS/C37TgXMae46Bzd527bZUVSb
    artifact: NuGet_Files
    server:             # remove to push to NuGet.org
    skip_symbols: false
    symbol_server:      # remove to push symbols to SymbolSource.org

  -
    provider: NuGet
    server: https://ci.appveyor.com/nuget/salaros/api/v2/package
    symbol_server: https://ci.appveyor.com/nuget/salaros/api/v2/package
    api_key:
      secure: 3zmnmVBweTgdk4SBM/rWHdC9JOM9s0pxm1bw1d+WHDo=
    artifact: NuGet_Files

after_deploy:
    - ps: |
        if ($env:APPVEYOR_REPO_TAG -eq "true" -and $env:APPVEYOR_REPO_TAG_NAME) {
            $apiUrl = 'https://ci.appveyor.com/api'
            $headers = @{
                "Authorization" = "Bearer $env:APPVEYOR_TOKEN"
                "Content-type" = "application/json"
            }
            Invoke-RestMethod -Method Put "$apiUrl/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/settings/build-number" -Body '{"nextBuildNumber": 1 }' -Headers $headers

            $env:APPVEYOR_REPO_TAG_NAME = $env:APPVEYOR_REPO_TAG_NAME.TrimStart("v")
            if ($env:APPVEYOR_REPO_TAG_NAME -match '^([0-9]+\.[0-9]+\.[0-9]+(\.[0-9]+)?)$') {
                $tag_ver = [version]$env:APPVEYOR_REPO_TAG_NAME
                $ver_format = "version: {0}.{1}.{2}.{3}" -f $tag_ver.Major, $tag_ver.Minor, ($tag_ver.Build + 1), '{build}'
                $headers."Content-type" = "text/plain";
                Invoke-RestMethod -Method Put "$apiUrl/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/settings/yaml" -Body $ver_format -Headers $headers
            }
        }

# Start builds on tags only (GitHub and BitBucket)
skip_non_tags: false

# Tests shall stay off for now
test_script:
    - cmd: dotnet test .\tests

# Test coverage: OpenCover + Coveralls
after_test:
  - ps: |
      # Install NuGet packages and tools
      nuget install  OpenCover  -Version 4.6.519  -OutputDirectory packages
      dotnet tool install coveralls.net --tool-path tools

      # Set variables
      .\packages\OpenCover.4.6.519\tools\OpenCover.Console.exe -target:dotnet.exe -targetargs:"test .\tests" -register:user -filter:"+[*]* -[xunit*]* -[*Tests]*" -excludedirs:".\src\obj" -output:".\tests\coverage.xml" -oldStyle
      .\tools\csmacnz.Coveralls.exe --opencover --input .\tests\coverage.xml --repoToken $env:COVERALLS_REPO_TOKEN --commitId $env:APPVEYOR_REPO_COMMIT --commitBranch $env:APPVEYOR_REPO_BRANCH --commitAuthor $env:APPVEYOR_REPO_COMMIT_AUTHOR --commitEmail $env:APPVEYOR_REPO_COMMIT_AUTHOR_EMAIL --commitMessage $env:APPVEYOR_REPO_COMMIT_MESSAGE --jobId $env:APPVEYOR_JOB_ID
